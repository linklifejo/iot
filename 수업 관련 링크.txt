https://jjlee.gitbook.io/entry-arduino/board_basic/arduino_sort
// 외부 Led 동작 시키기
https://codingrun.com/55

// 7-segment datasheet
https://www.tme.eu/Document/b0c8ead352d7eb3a3748f6592625167b/FYS-5611BS-21.pdf

// 코코아팹
https://kocoafab.cc/

// Clcd
https://kocoafab.cc/tutorial/view/689

// 스위치 led 제어
https://kocoafab.cc/tutorial/view/539

// 스위치 풀업 & 풀다운
https://kocoafab.cc/tutorial/view/526

// 초음파 거리 센서.
https://kocoafab.cc/tutorial/view/357

// fnd
https://github.com/DeanIsMe/SevSeg/blob/master/SevSeg.cpp

// 도트 매트릭스
https://kocoafab.cc/tutorial/view/734

http://arduino.esp8266.com/stable/package_esp8266com_index.json

// nodeMCU 드라이버 다운로드
https://github.com/nodemcu/nodemcu-devkit/tree/master/Drivers




use new_schema;

CREATE TABLE `new_schema`.`test` (
 `id` INT NOT NULL AUTO_INCREMENT,
 `content` VARCHAR(45) NULL,
 `regdate` DATETIME NULL,
 PRIMARY KEY (`id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;





// nodeMCU에 업로드할 프로그램.
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>

#define LED LED_BUILTIN
const char* ssid = "you_ssid";
const char* password = "you_password";

ESP8266WebServer server(80);
// 가변저항 이용.

void handleRoot() {
  Serial.println("You called root page");

  // 보여줄 웹페이지와 스크립트 생성.
  String s = "<!DOCTYPE html><html><head><meta charset='UTF-8'></head><body>";
  s += "<div><h1>NodeMCU_13</h1>";
  s += "<button type='button' onclick='sendData(1)'>LED ON</button>";
  s += "<button type='button' onclick='sendData(0)'>LED OFF</button><BR></div>";
  s += "<div>ADC Value is : <span id='ADCValue'>0</span><br>";
  s += "LED State is : <span id='LEDState'>NA</span></div>";
  s += "<script src='https://code.jquery.com/jquery-3.6.0.min.js'></script>";
  s += "<script>";
  s += " function sendGet(param) {";
  s += "$.ajax({";
  s += "type : 'get',";
  s += "url : 'http://192.168.123.135:8090/node?led=' + param,";
  s += "success : function(result, status, xhr) {";
  s += "console.log(result);";
  s += "},});}";
  s += "function sendData(led) {";
  s += "$.ajax({  type : 'get',";
  s += "        url : '/setLED?LEDstate=' + led,";
  s += "    success : function(result, status, xhr) { ";
  s += "  console.log(result);";
  s += "          $('#LEDState').html(result);";
  s += "      sendGet(result);";
  s += "},      });   }";
  s += "setInterval(function() { ";
  s += "getData();";
  s += "}, 2000);";
  s += "function getData() { ";
  s += "$.ajax({  type : 'get',";
  s += "url : '/readADC',";
  s += "success : function(result, status, xhr) { ";
  s += "          console.log(result);";
  s += "          $('#ADCValue').html(result);";
  s += "  },      });";
  s += "}</script><br></body></html>";

  server.send(200, "text/html", s);// 웹 브라우저에 표시.
}

void handleADC() {
  int a = analogRead(A0); // 노드엠의 A0 핀의 갑을 읽어와서 정수형 변수에 대입.
  String adcValue = String(a); // 문자열로 변환.
  Serial.println("adcValue: " + adcValue); // 시리얼 모니터로 출력.

  server.send(200, "text/plane", adcValue); // 웹서버에 전송.
}

// 잘못된 접근시 안내 메세지 생성.
void handleNotFound() {
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET) ? "GET" : "POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i = 0; i < server.args(); i++) {
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

void handleLED() {
  String ledState = "OFF";
  String t_state = server.arg("LEDstate");
  //Refer  xhttp.open("GET", "setLED?LEDstate="+led, true);
  Serial.print(t_state + " ");
  if (t_state == "1")
  {
    digitalWrite(LED, LOW); //LED ON
    ledState = "ON"; //Feedback parameter
    Serial.println("led_on");
  }
  else
  {
    digitalWrite(LED, HIGH); //LED OFF
    ledState = "OFF"; //Feedback parameter
    Serial.println("led_off");
  }

  server.send(200, "text/plane", ledState); //Send web page
}

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  pinMode(LED, OUTPUT);
  pinMode(A0, INPUT);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/setLED", handleLED);
  server.on("/readADC", handleADC);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
}


// 노드엠씨유 구조
http://daddynkidsmakers.blogspot.com/2016/11/esp8266-blynk-iot.html